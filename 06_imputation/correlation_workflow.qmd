---
title: "co-expression with imputation"
author: "Harvard Chan Bioinformatics Core"
date: "`r Sys.Date()`"
format:
   html:
    number-sections: false
    default-image-extension: svg
    lightbox: true
    callout-icon: false
    format-links: true
    toc: true
    theme: sandstone
    echo: true
    eval: true
    message: false
    warning: false
    code-copy: true
    code-overflow: wrap
    code-fold: true
    code-line-numbers: true
    embed-resources: true
    standalone: true
    html-math-method: katex
    grid:
      sidebar-width: 250px
      body-width: 900px
      margin-width: 300px
    comments:
      hypothesis: true
params:
   project_file: ../information.R
   seurat_obj: "https://github.com/bcbio/bcbioR-test-data/raw/refs/heads/main/singlecell/tiny.rds"
   group_column: "integrated_snn_res.0.4"
   path_outs: "./test_out"
   magic_condaEnv: "magic_env"
knitr:
  opts_chunk:
    fig-align: "center"
    echo: true
    cache: false
    error: true
    highlight: true
    message: false
    prompt: false
    tidy: false
    warning: false
---

```{r library-load}
#| cache: false
#| message: false
#| echo: false
library(tidyverse)
library(knitr)
library(glue)
library(Seurat)

library(pheatmap)
library(gridExtra)
library(RColorBrewer)
library(viridis)
library(SAVER)
library(Rmagic)

invisible(list2env(params, environment()))
source(project_file)
reticulate::use_condaenv(magic_condaEnv, required = T)

# Create output directory if it doesn't exist
if (!dir.exists(path_outs)) {
  dir.create(path_outs, recursive = TRUE)
  cat("Created output directory:", path_outs, "\n")
}

inputRead <- function(f) {
  if (sum(endsWith(f, c("rds", "RDS"))) > 0) {
    if (R.utils::isUrl(f)) {
      f <- url(f)
    }
    return(readRDS(f))
  } else if (sum(endsWith(f, c("qs", "QS"))) > 0) {
    if (R.utils::isUrl(f)) {
      f <- url(f)
    }
    return(qread(f))
  } else {
    print("Check file extension and choose appropriate functions!")
  }
}
```

```{r report-setup}
#| echo: false
ggplot2::theme_set(theme_light(base_size = 11))
```


```{r filter-parameters}
# Filtration parameters
filter_gene <- FALSE
min_exp <- 0.2
min_cells <- 40
min_perc <- 0.2
```

This report intends to both calculate correlations of gene of interests and also compares how imputation changes those values. 

Throughout this report, we assess Spearman correlation estimates.

We further assessed two ways of imputating gene expression values: MAGIC and SAVER.

More details about the method can be found in the section **Method description**.

# Overview of project 

- Path seurat: `r seurat_obj`
- Metadata column with cell group label: `r group_column`
- Filter genes based on expression and frequency: `r filter_gene`

List of all gene of interests:

```{r gene-of-interests}
corr_genes_all <- c(
  "COL1A1", "COL1A2", "DCN",
  "EBF2", "IL33", "PRX", "LY6G6C"
)
DT::datatable(data.frame(gene = corr_genes_all))
```

Starting off with `r length(corr_genes_all)` genes of interest.

# Load seurat object 

```{r seurat-loadin}
seurat <- inputRead(seurat_obj)
Idents(seurat) <- group_column
seurat[["SCT"]] <- NULL
raw_rna <- GetAssayData(object = seurat[["RNA"]], layer = "counts")
genes.use <- rowSums(raw_rna) > 0
genes.use <- names(genes.use[genes.use])
seurat <- seurat[genes.use, ]
n_cells <- ncol(seurat)
```

From the genes that were supplied, removing any that are not expressed in this dataset.

```{r only-present}
corr_genes <- corr_genes_all[corr_genes_all %in% genes.use]
```

Next we look at the basic distribution of remaining genes of interest in terms of expression and number of cells they are expressed in.

These are the following filtration metrics that are set:

- Average expression < `r min_exp`
- Number of cells expressed in > `r min_cells`
- Percentage of cells expressed in > `r min_perc`

Filtration parameter was set to `r filter_gene`. If FALSE, no further filtration will be done at this step.

```{r filtered-gene}
data_rna <- FetchData(seurat[["RNA"]], vars = corr_genes)

# Number of cells a gene is expressed in
num_cells <- colSums(data_rna > 0)
# Percentage of cells a gene is expressed in
perc_cells <- num_cells / ncol(seurat)
# Average expression of a gene
avg_expression <- colMeans(data_rna)

df_genes <- data.frame(num_cells, perc_cells, avg_expression)
df_genes <- df_genes %>%
  mutate(filter = !((perc_cells > min_perc) &
    (num_cells > min_cells) &
    (avg_expression > min_exp)))
df_genes$gene <- row.names(df_genes)
df_genes <- df_genes %>% arrange(desc(avg_expression), desc(perc_cells))
df_genes %>%
  select(-gene) %>%
  magrittr::set_colnames(c(
    "N_Cell_Expressed", "Perc_Cell_Expressed",
    "Avg_Expression", "Filter"
  )) %>%
  DT::datatable() %>%
  DT::formatRound(columns = c("Perc_Cell_Expressed", "Avg_Expression"), digits = 3)
```

```{r visualize-filter}
#| fig-width: 6
df_genes %>%
  ggplot(aes(x = perc_cells, y = avg_expression, color = filter)) +
  geom_point(size = rel(3)) +
  scale_color_manual(values = c("black", "darkred")) +
  theme_minimal() +
  labs(x = "Percent of cells expressing the gene", y = "Average expression")
```

```{r remain-gene}
if (filter_gene == TRUE) {
  corr_genes <- (df_genes %>% subset(filter == FALSE))$gene
}
```

`r length(corr_genes)` genes of interest remaining.

# Imputation and normalization 

We compare three alternative methods of estimating expression levels to log normalization and assess their ability to account for dropout.

1. `SCTransform` (raw counts -> normalized counts)
2. `MAGIC` (raw counts -> imputed, normalized counts)
3. `SAVER` (raw counts -> imputed, normalized counts)

```{r imputation}
# Store output so we don't have to re-run imputation each time
filename <- glue("{path_outs}/imputed.RDS")
if (!file.exists(filename)) {
  # Get raw counts (genes x cells matrix)
  raw_rna <- as.matrix(GetAssayData(seurat[["RNA"]], slot = "counts"))

  # SCT
  # Re-run SCT on subset data
  seurat <- SCTransform(seurat, return.only.var.genes = FALSE, min_cells = 1)

  # Creating new seurat object for genes of interest only
  # Use GetAssayData to reliably extract counts/data (features x cells)
  data_raw <- as.matrix(GetAssayData(seurat[["RNA"]], slot = "counts")[corr_genes, , drop = FALSE])
  data_rna <- as.matrix(GetAssayData(seurat[["RNA"]], slot = "data")[corr_genes, , drop = FALSE])
  data_sct <- as.matrix(GetAssayData(seurat[["SCT"]], slot = "data")[corr_genes, , drop = FALSE])

  seurat_imputed <- CreateSeuratObject(
    counts = data_raw,
    data = data_rna,
    meta.data = seurat@meta.data
  )
  seurat_imputed[["SCT"]] <- CreateAssayObject(data = data_sct)
  seurat_imputed[["RAW"]] <- CreateAssayObject(counts = raw_rna)

  # Delete the original seurat object to save memory
  rm(seurat)

  data_magic <- magic(t(raw_rna), genes = corr_genes)$result
  # magic may return a data.frame/tibble or matrix (cells x genes). Force to matrix and transpose to features x cells
  if (!is.matrix(data_magic)) data_magic <- as.matrix(data_magic)
  data_magic_t <- t(data_magic)
  # ensure dimnames align: rows = genes, cols = cells
  if (is.null(rownames(data_magic_t))) rownames(data_magic_t) <- corr_genes
  if (is.null(colnames(data_magic_t))) colnames(data_magic_t) <- colnames(raw_rna)
  seurat_imputed[["MAGIC"]] <- CreateAssayObject(data = data_magic_t)

  # SAVER
  # Generate SAVER predictions for those genes
  genes.ind <- which(rownames(raw_rna) %in% corr_genes)
  saverD <- raw_rna
  attr(saverD, "class") <- "matrix"
  data_saver <- saver(saverD,
    pred.genes = genes.ind,
    pred.genes.only = TRUE,
    estimates.only = TRUE,
    ncores = parallel::detectCores() - 2
  )

  seurat_imputed[["SAVER"]] <- CreateAssayObject(data = data_saver)

  saveRDS(seurat_imputed, filename)
}

seurat_imputed <- readRDS(filename)
```

## Average expression for each method

```{r avg-expr}
#| fig-width: 6
assays <- c("RNA", "SCT", "MAGIC", "SAVER")

df_avg <- data.frame(gene = corr_genes)
for (assay in assays) {
  data <- GetAssayData(object = seurat_imputed[[assay]], layer = "data")
  avg <- data.frame(rowMeans(data))
  colnames(avg) <- assay
  avg$gene <- row.names(avg)
  df_avg <- left_join(df_avg, avg, by = "gene")
}

pheatmap(df_avg %>% column_to_rownames(var = "gene"),
  scale = "column",
  cluster_col = TRUE, cluster_row = TRUE,
  show_rownames = TRUE,
  angle_col = 0, color = inferno(10)
)
```

# Correlation Estimates 

We have a few different ways to compute correlation scores with their associated p-values:

1. `Spearman` correlation 
  - `SCTransform` counts -> spearman correlation matrix
  - `MAGIC` imputed -> spearman correlation matrix
  - `SAVER` imputed -> spearman correlation matrix
2. (removed) `CS-CORE` (this report no longer runs CS-CORE)

```{r correlations}
# Store output so we don't have to re-run correlation each time
filename <- glue("{path_outs}/corr.csv")

if (!file.exists(filename)) {
  # Compute spearman correlation for each method (except CS-CORE which is run later)
  # Unique combination of each gene pair
  genes_comb <- data.frame(t(combn(corr_genes, 2)))
  n_comb <- nrow(genes_comb)

  # Create dataframe with correlation and p-values scores
  df_corr <- genes_comb %>% rename("Var1" = X1, "Var2" = X2)
  df_corr[assays] <- NA
  df_p_val <- df_corr

  for (idx in 1:n_comb) {
    if (idx %% 200 == 0) {
      print(glue("{idx}/{n_comb} correlations computed."))
    }

    # Name of genes to run correlation on
    gene_1 <- genes_comb[idx, 1]
    gene_2 <- genes_comb[idx, 2]

    for (assay_ in assays) {
      # extract assay data safely (features x cells) and subset to the two genes
      assay_mat <- tryCatch(as.matrix(GetAssayData(seurat_imputed[[assay_]], slot = "data")), error = function(e) NULL)
      if (is.null(assay_mat)) {
        gene_exp <- data.frame()
      } else {
        sub_mat <- assay_mat[c(gene_1, gene_2), , drop = FALSE]
        # transpose to cells x genes for cor.test
        gene_exp <- as.data.frame(t(sub_mat))
      }

      if (all(gene_exp[[gene_1]] == 0) | all(gene_exp[[gene_2]] == 0)) {
        corr_val <- 0.0
        p_val <- 1.0
      } else {
        # Calculate spearman correlation and p-value otherwise
        tmp <- cor.test(gene_exp[[gene_1]], gene_exp[[gene_2]],
          method = "spearman", exact = FALSE
        )
        corr_val <- as.numeric(unname(tmp$estimate))
        p_val <- as.numeric(tmp$p.value)
      }

      # Store correlation and p-values
      df_corr[idx, assay_] <- corr_val
      df_p_val[idx, assay_] <- p_val
    }
  }

  # CS-CORE removed: no additional co-expression estimates are appended here

  # Save output
  write.csv(df_corr, filename)
  write.csv(df_p_val, glue("{path_outs}/p_corr.csv"))
}

df_corr <- read.csv(filename, row.names = 1)
df_p_val <- read.csv(glue("{path_outs}/p_corr.csv"), row.names = 1)
```

## Heatmap of correlation estimates

Showing the patterns of correlation for each method. The x-axis and y-axis are the genes of interest with the corresponding correlation value for the pair as the value. Keep in mind that this is symmetric matrix.

```{r visualize-cors}
#| fig-width: 7
methods <- c("RNA", "SCT", "MAGIC", "SAVER")

cor_List <- purrr::map(methods, \(method){
  corr <- df_corr[c("Var1", "Var2", method)]
  corr_cp <- corr %>% rename(Var1 = Var2, Var2 = Var1)
  corr <- rbind(corr, corr_cp)
  mtx <- reshape2::dcast(corr, Var2 ~ Var1) %>% column_to_rownames("Var2")

  # Set the diagonal values: Correlation = 1, p-value = 1
  mtx <- as.matrix(mtx)
  diag(mtx) <- 1

  breaks <- seq(-1, 1, by = 0.1)
  show_legend <- F
  p <- pheatmap(mtx,
    color = inferno(10),
    show_rownames = FALSE,
    show_colnames = FALSE,
    breaks = breaks,
    main = method,
    silent = T,
    legend = show_legend,
    fontsize = rel(8)
  )
  return(p[[4]])
})

cor_comb <- grid.arrange(grobs = cor_List, nrow = 2, ncol = 3)
plot(cor_comb)
```

# Compare correlation estimates across methods 

Comparing the correlation scores for each gene pair for MAGIC and SAVER.

In these scatterplots, the gene-pairs that are colored red have different results for significance.

```{r cor-compare}
#| fig-width: 3
#| fig-height: 8
methods <- c("MAGIC", "SAVER")
methods_comb <- data.frame(t(combn(methods, 2)))
plot_list <- list()

for (idx in 1:nrow(methods_comb)) {
  method_1 <- methods_comb[idx, 2]
  method_2 <- methods_comb[idx, 1]

  corr <- df_corr[c("Var1", "Var2", method_1, method_2)]
  p_val <- df_p_val[, c("Var1", "Var2", method_1, method_2)]
  corr$sig_1 <- p_val[[method_1]]
  corr$sig_2 <- p_val[[method_2]]

  corr <- corr %>% mutate(sig = (sig_1 < 0.5) & (sig_2 < 0.05))

  p <- ggplot(corr) +
    geom_point(aes(
      x = get(method_1), y = get(method_2),
      color = sig
    ), size = rel(3)) +
    theme_bw() +
    NoLegend() +
    scale_color_manual(values = c("FALSE" = "#9D0208", "TRUE" = "black")) +
    labs(x = method_1, y = method_2, title = paste(method_1, "vs", method_2)) +
    theme(plot.title = element_text(size = rel(1.5))) +
    ylim(-1, 1) +
    xlim(-1, 1) +
    geom_abline(slope = 1, intercept = 0, color = "#63bff0")

  plot_list[[idx]] <- ggplotGrob(p)
}

grid.arrange(grobs = plot_list, nrow = 3)
```

# Method description 

[`MAGIC`](https://github.com/KrishnaswamyLab/MAGIC) is an algorithm for denoising high-dimensional data most commonly applied to single-cell RNA sequencing data. MAGIC learns the manifold data, using the resultant graph to smooth the features and restore the structure of the data.

[`SAVER`](https://github.com/mohuangx/SAVER) implements a regularized regression prediction and empirical Bayes method to recover the true gene expression profile in noisy and sparse single-cell RNA-seq data.

# R session 

List and version of tools used for the QC report generation.

```{r}
sessionInfo()
```

